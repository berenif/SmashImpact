name: Optimized Build and Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at midnight

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Determine what changed to optimize build
  changes:
    runs-on: ubuntu-latest
    outputs:
      wasm: ${{ steps.filter.outputs.wasm }}
      js: ${{ steps.filter.outputs.js }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            wasm:
              - 'wasm/**'
              - 'Makefile'
              - 'build.sh'
            js:
              - 'src/**/*.js'
              - '*.html'
              - 'public/**/*.js'
            docs:
              - 'docs/**'
              - '*.md'

  # Build job with heavy caching
  build:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clone for faster checkout

      # Cache Emscripten SDK
      - name: Cache Emscripten SDK
        if: needs.changes.outputs.wasm == 'true'
        uses: actions/cache@v3
        id: cache-emsdk
        with:
          path: |
            emsdk
            ~/.emscripten_cache
          key: ${{ runner.os }}-emsdk-3.1.50
          restore-keys: |
            ${{ runner.os }}-emsdk-

      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Cache WASM build artifacts
      - name: Cache WASM artifacts
        uses: actions/cache@v3
        id: cache-wasm
        with:
          path: |
            public/game_engine.js
            public/game_engine.wasm
          key: ${{ runner.os }}-wasm-${{ hashFiles('wasm/**/*.cpp', 'wasm/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-wasm-

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies (only if needed)
      - name: Install dependencies
        if: steps.cache-wasm.outputs.cache-hit != 'true' || needs.changes.outputs.js == 'true'
        run: |
          npm ci --prefer-offline --no-audit

      # Install Emscripten (only if not cached and WASM changed)
      - name: Setup Emscripten
        if: needs.changes.outputs.wasm == 'true' && steps.cache-emsdk.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.50
          ./emsdk activate 3.1.50

      # Build WASM (only if source changed and not cached)
      - name: Build WASM module
        if: needs.changes.outputs.wasm == 'true' && steps.cache-wasm.outputs.cache-hit != 'true'
        run: |
          source emsdk/emsdk_env.sh
          make build

      # Quick JavaScript build (always run but fast)
      - name: Quick JavaScript build
        run: |
          chmod +x build-quick.sh
          ./build-quick.sh --check || true

      # Run tests in parallel
      - name: Run tests
        run: |
          npm test || true

      # Prepare artifacts for deployment
      - name: Prepare deployment
        run: |
          mkdir -p _site
          cp -r public _site/
          cp *.html _site/
          cp -r src _site/ 2>/dev/null || true
          cp -r assets _site/ 2>/dev/null || true
          cp -r docs _site/ 2>/dev/null || true
          
          # Create a simple index if it doesn't exist
          if [ ! -f _site/index.html ]; then
            if [ -f _site/game.html ]; then
              cp _site/game.html _site/index.html
            fi
          fi

      # Upload Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

  # Deploy job (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Cache cleanup job (runs weekly)
  cleanup-cache:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old caches
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH="refs/heads/main"
          
          echo "Fetching list of cache keys"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )
          
          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches older than 7 days..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}