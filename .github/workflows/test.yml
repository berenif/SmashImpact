name: Test Unit - Node 20

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm list --depth=0

    - name: Create required directories
      run: |
        mkdir -p test-results
        mkdir -p coverage

    - name: Run linter
      run: |
        npm run lint || true
      continue-on-error: true

    - name: Run tests with coverage
      run: |
        npm run test:ci
      env:
        NODE_ENV: test
        CI: true

    - name: Generate test report
      if: always()
      run: |
        echo "Test execution completed"
        ls -la test-results/ || echo "No test-results directory"
        ls -la coverage/ || echo "No coverage directory"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          !test-results/.gitkeep
        retention-days: 30
        if-no-files-found: warn

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage/
          !coverage/.gitkeep
        retention-days: 30
        if-no-files-found: warn

    - name: Publish test results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: |
          test-results/junit.xml
          test-results/**/*.xml
        check_name: Test Results
        comment_mode: always
        compare_to_earlier_commit: true
        test_changes_limit: 10

    - name: Coverage Report
      if: always()
      uses: ArtiomTr/jest-coverage-report-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        skip-step: install
        test-script: npm run test:coverage
        annotations: failed-tests
        coverage-file: ./coverage/coverage-final.json
        base-coverage-file: ./coverage/coverage-final.json

    - name: Code Coverage Summary
      if: always()
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/coverage-summary.json ]; then
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.json | jq '.' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage summary available" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test-results/summary.json ]; then
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat test-results/summary.json | jq '.' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "No test summary available" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let coverageData = 'No coverage data available';
          let testResults = 'No test results available';
          
          try {
            const coveragePath = path.join(process.env.GITHUB_WORKSPACE, 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              coverageData = `
                - Lines: ${total.lines.pct}%
                - Statements: ${total.statements.pct}%
                - Functions: ${total.functions.pct}%
                - Branches: ${total.branches.pct}%
              `;
            }
          } catch (error) {
            console.error('Error reading coverage:', error);
          }
          
          try {
            const summaryPath = path.join(process.env.GITHUB_WORKSPACE, 'test-results', 'summary.json');
            if (fs.existsSync(summaryPath)) {
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              testResults = `
                - Total Tests: ${summary.metrics.totalTests || 0}
                - Passed: ${summary.metrics.passedTests || 0}
                - Failed: ${summary.metrics.failedTests || 0}
                - Duration: ${(summary.duration / 1000).toFixed(2)}s
              `;
            }
          } catch (error) {
            console.error('Error reading test results:', error);
          }
          
          const comment = `## ðŸ§ª Test Results - Node 20
          
          ### Test Summary
          ${testResults}
          
          ### Code Coverage
          ${coverageData}
          
          ---
          *Generated by GitHub Actions Workflow*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Check test thresholds
      if: always()
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            const threshold = 60;
            
            console.log('Coverage Check:');
            console.log('Lines:', total.lines.pct + '%');
            console.log('Statements:', total.statements.pct + '%');
            console.log('Functions:', total.functions.pct + '%');
            console.log('Branches:', total.branches.pct + '%');
            
            if (total.lines.pct < threshold || 
                total.statements.pct < threshold || 
                total.functions.pct < threshold || 
                total.branches.pct < threshold) {
              console.error('Coverage is below threshold of ' + threshold + '%');
              process.exit(1);
            } else {
              console.log('All coverage thresholds met!');
            }
          "
        fi